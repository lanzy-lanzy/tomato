#include <WiFi.h>
#include <ESP32Servo.h>
#include <WebServer.h>
#include <ArduinoJson.h>

Servo servo1; // Stopper servo
Servo servo2; // Sorting servo

// WiFi credentials
const char* ssid = "Mich 2.4G";      // Replace with your WiFi SSID
const char* password = "@Mich123***"; // Replace with your WiFi Password

// Web server on port 80
WebServer server(80);

// Status variables
bool isRunning = false;
int ripeTomatoCount = 0;
int greenTomatoCount = 0;
int cameraRipeTomatoCount = 0;    // Count of ripe tomatoes detected by camera
int cameraGreenTomatoCount = 0;   // Count of green tomatoes detected by camera
bool cameraMode = false;          // Whether camera detection mode is active
String lastAction = "none";
String lastDetectionSource = "manual"; // "manual", "camera"

// Timer variables for non-blocking servo movement
unsigned long lastActionTime = 0;
bool waitingForServoReturn = false;
int lastServoPosition = 90;  // Default neutral position

void setup() {
  Serial.begin(115200);

  // Attach the servos with expanded pulse width range for better control
  servo1.attach(18, 500, 2500); // GPIO 18 for servo1, min pulse 500us, max pulse 2500us
  servo2.attach(19, 500, 2500); // GPIO 19 for servo2, min pulse 500us, max pulse 2500us

  // Initial positions
  servo1.write(90); // Stopper in neutral pos
  delay(500);       // Give servo time to move
  servo2.write(90); // Sorter neutral
  delay(500);       // Give servo time to move

  Serial.println("Servos initialized");

  // Connect to WiFi
  Serial.print("Connecting to WiFi...");
  WiFi.begin(ssid, password);

  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\nConnected to WiFi!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Set up web server routes
  server.on("/", HTTP_GET, handleRoot);
  server.on("/status", HTTP_GET, handleStatus);
  server.on("/control", HTTP_POST, handleControl);
  server.on("/sort", HTTP_POST, handleSort);
  server.on("/test", HTTP_GET, handleTest); // Add test endpoint
  server.on("/camera_detect", HTTP_GET, handleCameraDetect); // Direct camera detection endpoint
  server.enableCORS(true);

  // Start server
  server.begin();
  Serial.println("HTTP server started");
}

void loop() {
  server.handleClient();

  // Handle servo return to neutral position
  if (waitingForServoReturn && millis() - lastActionTime >= 2000) {
    // 2 seconds have passed, move servo to neutral position
    Serial.println("Returning servo to neutral position (90)");

    // Move servo back to neutral
    servo2.write(90);

    // Small delay to ensure the servo starts moving
    delay(100);

    // Reset the waiting flag
    waitingForServoReturn = false;

    // Log completion
    Serial.println("Servo returned to neutral position");
  }

  // Also handle serial commands for backward compatibility
  if (Serial.available()) {
    String command = Serial.readStringUntil('\n');
    command.trim();
    processCommand(command);
  }
}

void handleRoot() {
  String html = "<html><head><title>Tomato Sorter</title></head>";
  html += "<body><h1>Tomato Sorter ESP32 Controller</h1>";
  html += "<p>Use the /control and /sort endpoints to control the sorter.</p>";
  html += "<p>Current IP: " + WiFi.localIP().toString() + "</p>";
  html += "</body></html>";
  server.send(200, "text/html", html);
}

void handleStatus() {
  DynamicJsonDocument doc(384);  // Increased size for additional fields
  doc["running"] = isRunning;
  doc["ripe_count"] = ripeTomatoCount;
  doc["green_count"] = greenTomatoCount;
  doc["camera_ripe_count"] = cameraRipeTomatoCount;
  doc["camera_green_count"] = cameraGreenTomatoCount;
  doc["total_ripe_count"] = ripeTomatoCount + cameraRipeTomatoCount;
  doc["total_green_count"] = greenTomatoCount + cameraGreenTomatoCount;
  doc["camera_mode"] = cameraMode;
  doc["last_action"] = lastAction;
  doc["last_detection_source"] = lastDetectionSource;
  doc["ip"] = WiFi.localIP().toString();

  String response;
  serializeJson(doc, response);
  server.send(200, "application/json", response);
}

void handleControl() {
  if (server.hasArg("plain")) {
    String body = server.arg("plain");
    DynamicJsonDocument doc(256);
    DeserializationError error = deserializeJson(doc, body);

    if (!error) {
      String command = doc["command"].as<String>();
      processCommand(command);
      server.send(200, "application/json", "{\"status\":\"success\",\"command\":\"" + command + "\"}");
    } else {
      server.send(400, "application/json", "{\"status\":\"error\",\"message\":\"Invalid JSON\"}");
    }
  } else {
    server.send(400, "application/json", "{\"status\":\"error\",\"message\":\"No data provided\"}");
  }
}

void handleSort() {
  Serial.println("Received sort request");

  if (server.hasArg("plain")) {
    String body = server.arg("plain");
    Serial.print("Request body: ");
    Serial.println(body);

    DynamicJsonDocument doc(256);
    DeserializationError error = deserializeJson(doc, body);

    if (!error) {
      String type = doc["type"].as<String>();
      bool fromCamera = false;

      // Check if from_camera field exists and get its value
      if (doc.containsKey("from_camera")) {
        // Handle different possible formats of the from_camera field
        if (doc["from_camera"].is<bool>()) {
          fromCamera = doc["from_camera"].as<bool>();
        }
        else if (doc["from_camera"].is<const char*>()) {
          // Handle string values like "true" or "false"
          String fromCameraStr = doc["from_camera"].as<String>();
          fromCamera = (fromCameraStr == "true" || fromCameraStr == "1");
        }
        else if (doc["from_camera"].is<int>()) {
          // Handle numeric values (1 = true, 0 = false)
          fromCamera = (doc["from_camera"].as<int>() != 0);
        }
      }

      // Force camera mode to be active when receiving camera detections
      if (fromCamera) {
        cameraMode = true;
      }

      Serial.print("Tomato type: ");
      Serial.println(type);
      Serial.print("From camera: ");
      Serial.println(fromCamera ? "Yes" : "No");

      // Set detection source
      lastDetectionSource = fromCamera ? "camera" : "manual";

      if (type == "ripe") {
        processCommand("sort_ripe");

        // Update appropriate counter based on source
        if (fromCamera) {
          cameraRipeTomatoCount++;
          Serial.println("Camera detected ripe tomato");
        } else {
          ripeTomatoCount++;
          Serial.println("Manual sort: ripe tomato");
        }

        // Send response with detailed information
        DynamicJsonDocument responseDoc(256);
        responseDoc["status"] = "success";
        responseDoc["sorted"] = "ripe";
        responseDoc["from_camera"] = fromCamera;
        responseDoc["ripe_count"] = ripeTomatoCount;
        responseDoc["green_count"] = greenTomatoCount;
        responseDoc["camera_ripe_count"] = cameraRipeTomatoCount;
        responseDoc["camera_green_count"] = cameraGreenTomatoCount;

        String response;
        serializeJson(responseDoc, response);
        server.send(200, "application/json", response);
        Serial.println("Response sent successfully");

      } else if (type == "green") {
        processCommand("sort_unripe");

        // Update appropriate counter based on source
        if (fromCamera) {
          cameraGreenTomatoCount++;
          Serial.println("Camera detected green tomato");
        } else {
          greenTomatoCount++;
          Serial.println("Manual sort: green tomato");
        }

        // Send response with detailed information
        DynamicJsonDocument responseDoc(256);
        responseDoc["status"] = "success";
        responseDoc["sorted"] = "green";
        responseDoc["from_camera"] = fromCamera;
        responseDoc["ripe_count"] = ripeTomatoCount;
        responseDoc["green_count"] = greenTomatoCount;
        responseDoc["camera_ripe_count"] = cameraRipeTomatoCount;
        responseDoc["camera_green_count"] = cameraGreenTomatoCount;

        String response;
        serializeJson(responseDoc, response);
        server.send(200, "application/json", response);
        Serial.println("Response sent successfully");

      } else {
        Serial.print("Invalid tomato type: ");
        Serial.println(type);
        server.send(400, "application/json", "{\"status\":\"error\",\"message\":\"Invalid tomato type\"}");
      }
    } else {
      Serial.print("JSON parsing error: ");
      Serial.println(error.c_str());
      server.send(400, "application/json", "{\"status\":\"error\",\"message\":\"Invalid JSON\"}");
    }
  } else {
    Serial.println("No data provided in request");
    server.send(400, "application/json", "{\"status\":\"error\",\"message\":\"No data provided\"}");
  }
}

void handleCameraDetect() {
  // Direct endpoint for camera detection - simpler than the JSON endpoint
  String type = server.arg("type");

  Serial.println("Camera detection received!");
  Serial.print("Detected tomato type: ");
  Serial.println(type);

  if (type == "ripe") {
    // Immediately move the servo for ripe tomato
    servo2.write(130);
    Serial.println("Moving servo to RIPE position (130)");

    // Update counter
    cameraRipeTomatoCount++;

    // Set up for return to neutral
    waitingForServoReturn = true;
    lastActionTime = millis();

    // Send response
    server.send(200, "application/json", "{\"status\":\"success\",\"message\":\"Servo moved for ripe tomato\"}");
  }
  else if (type == "green") {
    // Immediately move the servo for green tomato
    servo2.write(50);
    Serial.println("Moving servo to GREEN position (50)");

    // Update counter
    cameraGreenTomatoCount++;

    // Set up for return to neutral
    waitingForServoReturn = true;
    lastActionTime = millis();

    // Send response
    server.send(200, "application/json", "{\"status\":\"success\",\"message\":\"Servo moved for green tomato\"}");
  }
  else {
    server.send(400, "application/json", "{\"status\":\"error\",\"message\":\"Invalid tomato type\"}");
  }
}

void handleTest() {
  // Test endpoint for servo control
  String action = server.arg("action");

  if (action == "ripe") {
    processCommand("sort_ripe");
    server.send(200, "text/plain", "Testing ripe tomato sorting");
  }
  else if (action == "green") {
    processCommand("sort_unripe");
    server.send(200, "text/plain", "Testing green tomato sorting");
  }
  else if (action == "servo") {
    processCommand("test_servo");
    server.send(200, "text/plain", "Running servo test sequence");
  }
  else {
    String html = "<html><head><title>Servo Test</title></head><body>";
    html += "<h1>Servo Test Interface</h1>";
    html += "<p>Use the following links to test servo movements:</p>";
    html += "<ul>";
    html += "<li><a href='/test?action=ripe'>Test Ripe Tomato Sorting</a></li>";
    html += "<li><a href='/test?action=green'>Test Green Tomato Sorting</a></li>";
    html += "<li><a href='/test?action=servo'>Run Full Servo Test Sequence</a></li>";
    html += "</ul>";
    html += "</body></html>";
    server.send(200, "text/html", html);
  }
}

void processCommand(String command) {
  lastAction = command;

  if (command == "stop") {
    servo1.write(80);  // Close stopper
    isRunning = false;
    Serial.println("Stopper Closed");
  }
  else if (command == "release") {
    servo1.write(180);  // Release stopper
    isRunning = true;
    Serial.println("Stopper Released");
  }
  else if (command == "sort_ripe") {
    // Move sorter servo for ripe tomato with more pronounced movement
    servo2.write(130); // Increased from 110 to 130 for more movement
    Serial.println("Sorting Ripe - Moving servo to position 130");

    // Force a small delay to ensure the servo starts moving
    delay(100);

    // Set up for automatic return to neutral
    waitingForServoReturn = true;
    lastActionTime = millis();
  }
  else if (command == "sort_unripe" || command == "sort_green") {
    // Move sorter servo for unripe/green tomato with more pronounced movement
    servo2.write(50);  // Decreased from 70 to 50 for more movement
    Serial.println("Sorting Green - Moving servo to position 50");

    // Force a small delay to ensure the servo starts moving
    delay(100);

    // Set up for automatic return to neutral
    waitingForServoReturn = true;
    lastActionTime = millis();
  }
  else if (command == "reset_counts") {
    ripeTomatoCount = 0;
    greenTomatoCount = 0;
    Serial.println("Reset Counts");
  }
  else if (command == "reset_camera_counts") {
    cameraRipeTomatoCount = 0;
    cameraGreenTomatoCount = 0;
    Serial.println("Reset Camera Counts");
  }
  else if (command == "reset_all_counts") {
    ripeTomatoCount = 0;
    greenTomatoCount = 0;
    cameraRipeTomatoCount = 0;
    cameraGreenTomatoCount = 0;
    Serial.println("Reset All Counts");
  }
  else if (command == "camera_mode_on") {
    cameraMode = true;
    Serial.println("Camera Mode Enabled");
  }
  else if (command == "camera_mode_off") {
    cameraMode = false;
    Serial.println("Camera Mode Disabled");
  }
  else if (command == "test_servo") {
    // Test sequence for the sorting servo
    Serial.println("Testing sorting servo...");

    // Move to ripe position
    Serial.println("Moving to ripe position (130)");
    servo2.write(130);
    delay(1000);

    // Move to neutral
    Serial.println("Moving to neutral position (90)");
    servo2.write(90);
    delay(1000);

    // Move to green position
    Serial.println("Moving to green position (50)");
    servo2.write(50);
    delay(1000);

    // Return to neutral
    Serial.println("Returning to neutral position (90)");
    servo2.write(90);

    Serial.println("Servo test complete");
  }
}
